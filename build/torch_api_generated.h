// THIS FILE IS AUTOMATICALLY GENERATED, DO NOT EDIT BY HAND!

int atg_abs(tensor *, tensor self);
int atg_abs_(tensor *, tensor self);
int atg_abs_out(tensor *, tensor out, tensor self);
int atg_acos(tensor *, tensor self);
int atg_acos_(tensor *, tensor self);
int atg_acos_out(tensor *, tensor out, tensor self);
int atg_adaptive_avg_pool1d(tensor *, tensor self, int64_t *output_size_data, int output_size_len);
int atg_adaptive_avg_pool2d(tensor *, tensor self, int64_t *output_size_data, int output_size_len);
int atg_adaptive_avg_pool2d_out(tensor *, tensor out, tensor self, int64_t *output_size_data, int output_size_len);
int atg_adaptive_avg_pool3d(tensor *, tensor self, int64_t *output_size_data, int output_size_len);
int atg_adaptive_avg_pool3d_backward(tensor *, tensor grad_output, tensor self);
int atg_adaptive_avg_pool3d_backward_out(tensor *, tensor grad_input, tensor grad_output, tensor self);
int atg_adaptive_avg_pool3d_out(tensor *, tensor out, tensor self, int64_t *output_size_data, int output_size_len);
int atg_adaptive_max_pool1d(tensor *, tensor self, int64_t *output_size_data, int output_size_len);
int atg_adaptive_max_pool2d(tensor *, tensor self, int64_t *output_size_data, int output_size_len);
int atg_adaptive_max_pool2d_backward(tensor *, tensor grad_output, tensor self, tensor indices);
int atg_adaptive_max_pool2d_backward_out(tensor *, tensor grad_input, tensor grad_output, tensor self, tensor indices);
int atg_adaptive_max_pool2d_out(tensor *, tensor out, tensor indices, tensor self, int64_t *output_size_data, int output_size_len);
int atg_adaptive_max_pool3d(tensor *, tensor self, int64_t *output_size_data, int output_size_len);
int atg_adaptive_max_pool3d_backward(tensor *, tensor grad_output, tensor self, tensor indices);
int atg_adaptive_max_pool3d_backward_out(tensor *, tensor grad_input, tensor grad_output, tensor self, tensor indices);
int atg_adaptive_max_pool3d_out(tensor *, tensor out, tensor indices, tensor self, int64_t *output_size_data, int output_size_len);
int atg_add(tensor *, tensor self, tensor other);
int atg_add1(tensor *, tensor self, scalar other);
int atg_add_(tensor *, tensor self, tensor other);
int atg_add_1(tensor *, tensor self, scalar other);
int atg_add_out(tensor *, tensor out, tensor self, tensor other);
int atg_addbmm(tensor *, tensor self, tensor batch1, tensor batch2);
int atg_addbmm_(tensor *, tensor self, tensor batch1, tensor batch2);
int atg_addbmm_out(tensor *, tensor out, tensor self, tensor batch1, tensor batch2);
int atg_addcdiv(tensor *, tensor self, tensor tensor1, tensor tensor2);
int atg_addcdiv_(tensor *, tensor self, tensor tensor1, tensor tensor2);
int atg_addcdiv_out(tensor *, tensor out, tensor self, tensor tensor1, tensor tensor2);
int atg_addcmul(tensor *, tensor self, tensor tensor1, tensor tensor2);
int atg_addcmul_(tensor *, tensor self, tensor tensor1, tensor tensor2);
int atg_addcmul_out(tensor *, tensor out, tensor self, tensor tensor1, tensor tensor2);
int atg_addmm(tensor *, tensor self, tensor mat1, tensor mat2);
int atg_addmm_(tensor *, tensor self, tensor mat1, tensor mat2);
int atg_addmm_out(tensor *, tensor out, tensor self, tensor mat1, tensor mat2);
int atg_addmv(tensor *, tensor self, tensor mat, tensor vec);
int atg_addmv_(tensor *, tensor self, tensor mat, tensor vec);
int atg_addmv_out(tensor *, tensor out, tensor self, tensor mat, tensor vec);
int atg_addr(tensor *, tensor self, tensor vec1, tensor vec2);
int atg_addr_(tensor *, tensor self, tensor vec1, tensor vec2);
int atg_addr_out(tensor *, tensor out, tensor self, tensor vec1, tensor vec2);
int atg_affine_grid_generator(tensor *, tensor theta, int64_t *size_data, int size_len, int align_corners);
int atg_affine_grid_generator_backward(tensor *, tensor grad, int64_t *size_data, int size_len, int align_corners);
int atg_alias(tensor *, tensor self);
int atg_align_as(tensor *, tensor self, tensor other);
// tensor *atg_align_tensors(tensor *tensors_data, int tensors_len);
int atg_align_tensors(tensor *, tensor *tensors_data, int tensors_len);
int atg_all(tensor *, tensor self);
int atg_all1(tensor *, tensor self, int64_t dim, int keepdim);
int atg_all_out(tensor *, tensor out, tensor self, int64_t dim, int keepdim);
int atg_alpha_dropout(tensor *, tensor input, double p, int train);
int atg_alpha_dropout_(tensor *, tensor self, double p, int train);
int atg_angle(tensor *, tensor self);
int atg_angle_out(tensor *, tensor out, tensor self);
int atg_any(tensor *, tensor self);
int atg_any1(tensor *, tensor self, int64_t dim, int keepdim);
int atg_any_out(tensor *, tensor out, tensor self, int64_t dim, int keepdim);
int atg_arange(tensor *, scalar end, int options_kind, int options_device);
int atg_arange1(tensor *, scalar start, scalar end, int options_kind, int options_device);
int atg_arange2(tensor *, scalar start, scalar end, scalar step, int options_kind, int options_device);
int atg_arange_out(tensor *, tensor out, scalar end);
int atg_arange_out1(tensor *, tensor out, scalar start, scalar end);
int atg_argmax(tensor *, tensor self, int64_t dim, int keepdim);
int atg_argmin(tensor *, tensor self, int64_t dim, int keepdim);
int atg_argsort(tensor *, tensor self, int64_t dim, int descending);
int atg_as_strided(tensor *, tensor self, int64_t *size_data, int size_len, int64_t *stride_data, int stride_len, int64_t storage_offset);
int atg_as_strided_(tensor *, tensor self, int64_t *size_data, int size_len, int64_t *stride_data, int stride_len, int64_t storage_offset);
int atg_asin(tensor *, tensor self);
int atg_asin_(tensor *, tensor self);
int atg_asin_out(tensor *, tensor out, tensor self);
int atg_atan(tensor *, tensor self);
int atg_atan2(tensor *, tensor self, tensor other);
int atg_atan2_(tensor *, tensor self, tensor other);
int atg_atan2_out(tensor *, tensor out, tensor self, tensor other);
int atg_atan_(tensor *, tensor self);
int atg_atan_out(tensor *, tensor out, tensor self);
int atg_avg_pool1d(tensor *, tensor self, int64_t *kernel_size_data, int kernel_size_len, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len, int ceil_mode, int count_include_pad);
int atg_avg_pool2d(tensor *, tensor self, int64_t *kernel_size_data, int kernel_size_len, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len, int ceil_mode, int count_include_pad, int64_t divisor_override);
int atg_avg_pool2d_backward(tensor *, tensor grad_output, tensor self, int64_t *kernel_size_data, int kernel_size_len, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len, int ceil_mode, int count_include_pad, int64_t divisor_override);
int atg_avg_pool2d_backward_out(tensor *, tensor grad_input, tensor grad_output, tensor self, int64_t *kernel_size_data, int kernel_size_len, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len, int ceil_mode, int count_include_pad, int64_t divisor_override);
int atg_avg_pool2d_out(tensor *, tensor out, tensor self, int64_t *kernel_size_data, int kernel_size_len, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len, int ceil_mode, int count_include_pad, int64_t divisor_override);
int atg_avg_pool3d(tensor *, tensor self, int64_t *kernel_size_data, int kernel_size_len, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len, int ceil_mode, int count_include_pad, int64_t divisor_override);
int atg_avg_pool3d_backward(tensor *, tensor grad_output, tensor self, int64_t *kernel_size_data, int kernel_size_len, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len, int ceil_mode, int count_include_pad, int64_t divisor_override);
int atg_avg_pool3d_backward_out(tensor *, tensor grad_input, tensor grad_output, tensor self, int64_t *kernel_size_data, int kernel_size_len, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len, int ceil_mode, int count_include_pad, int64_t divisor_override);
int atg_avg_pool3d_out(tensor *, tensor out, tensor self, int64_t *kernel_size_data, int kernel_size_len, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len, int ceil_mode, int count_include_pad, int64_t divisor_override);
int atg_baddbmm(tensor *, tensor self, tensor batch1, tensor batch2);
int atg_baddbmm_(tensor *, tensor self, tensor batch1, tensor batch2);
int atg_baddbmm_out(tensor *, tensor out, tensor self, tensor batch1, tensor batch2);
int atg_bartlett_window(tensor *, int64_t window_length, int options_kind, int options_device);
int atg_bartlett_window1(tensor *, int64_t window_length, int periodic, int options_kind, int options_device);
int atg_batch_norm(tensor *, tensor input, tensor weight, tensor bias, tensor running_mean, tensor running_var, int training, double momentum, double eps, int cudnn_enabled);
int atg_batch_norm_backward_elemt(tensor *, tensor grad_out, tensor input, tensor mean, tensor invstd, tensor weight, tensor mean_dy, tensor mean_dy_xmu);
int atg_batch_norm_backward_reduce(tensor *, tensor grad_out, tensor input, tensor mean, tensor invstd, tensor weight, int input_g, int weight_g, int bias_g);
int atg_batch_norm_elemt(tensor *, tensor input, tensor weight, tensor bias, tensor mean, tensor invstd, double eps);
int atg_batch_norm_elemt_out(tensor *, tensor out, tensor input, tensor weight, tensor bias, tensor mean, tensor invstd, double eps);
int atg_batch_norm_gather_stats(tensor *, tensor input, tensor mean, tensor invstd, tensor running_mean, tensor running_var, double momentum, double eps, int64_t count);
int atg_batch_norm_gather_stats_with_counts(tensor *, tensor input, tensor mean, tensor invstd, tensor running_mean, tensor running_var, double momentum, double eps, int64_t *counts_data, int counts_len);
int atg_batch_norm_stats(tensor *, tensor input, double eps);
int atg_batch_norm_update_stats(tensor *, tensor input, tensor running_mean, tensor running_var, double momentum);
int atg_bernoulli(tensor *, tensor self);
int atg_bernoulli1(tensor *, tensor self, double p);
int atg_bernoulli_(tensor *, tensor self, tensor p);
int atg_bernoulli_1(tensor *, tensor self, double p);
int atg_bernoulli_out(tensor *, tensor out, tensor self);
int atg_bilinear(tensor *, tensor input1, tensor input2, tensor weight, tensor bias);
int atg_binary_cross_entropy(tensor *, tensor self, tensor target, tensor weight, int64_t reduction);
int atg_binary_cross_entropy_backward(tensor *, tensor grad_output, tensor self, tensor target, tensor weight, int64_t reduction);
int atg_binary_cross_entropy_backward_out(tensor *, tensor grad_input, tensor grad_output, tensor self, tensor target, tensor weight, int64_t reduction);
int atg_binary_cross_entropy_out(tensor *, tensor out, tensor self, tensor target, tensor weight, int64_t reduction);
int atg_binary_cross_entropy_with_logits(tensor *, tensor self, tensor target, tensor weight, tensor pos_weight, int64_t reduction);
int atg_binary_cross_entropy_with_logits_backward(tensor *, tensor grad_output, tensor self, tensor target, tensor weight, tensor pos_weight, int64_t reduction);
int atg_bincount(tensor *, tensor self, tensor weights, int64_t minlength);
int atg_bitwise_not(tensor *, tensor self);
int atg_bitwise_not_(tensor *, tensor self);
int atg_bitwise_not_out(tensor *, tensor out, tensor self);
int atg_bitwise_xor(tensor *, tensor self, scalar other);
int atg_bitwise_xor1(tensor *, tensor self, tensor other);
int atg_bitwise_xor_(tensor *, tensor self, scalar other);
int atg_bitwise_xor_1(tensor *, tensor self, tensor other);
int atg_bitwise_xor_out(tensor *, tensor out, tensor self, tensor other);
int atg_bitwise_xor_out1(tensor *, tensor out, tensor self, scalar other);
int atg_blackman_window(tensor *, int64_t window_length, int options_kind, int options_device);
int atg_blackman_window1(tensor *, int64_t window_length, int periodic, int options_kind, int options_device);
int atg_bmm(tensor *, tensor self, tensor mat2);
int atg_bmm_out(tensor *, tensor out, tensor self, tensor mat2);
// tensor *atg_broadcast_tensors(tensor *tensors_data, int tensors_len);
int atg_broadcast_tensors(tensor *, tensor *tensors_data, int tensors_len);
int atg_cartesian_prod(tensor *, tensor *tensors_data, int tensors_len);
int atg_cat(tensor *, tensor *tensors_data, int tensors_len, int64_t dim);
int atg_cat_out(tensor *, tensor out, tensor *tensors_data, int tensors_len, int64_t dim);
int atg_cauchy_(tensor *, tensor self, double median, double sigma);
int atg_cdist(tensor *, tensor x1, tensor x2, double p, int64_t compute_mode);
int atg_ceil(tensor *, tensor self);
int atg_ceil_(tensor *, tensor self);
int atg_ceil_out(tensor *, tensor out, tensor self);
int atg_celu(tensor *, tensor self);
int atg_celu_(tensor *, tensor self);
int atg_chain_matmul(tensor *, tensor *matrices_data, int matrices_len);
int atg_cholesky(tensor *, tensor self, int upper);
int atg_cholesky_inverse(tensor *, tensor self, int upper);
int atg_cholesky_inverse_out(tensor *, tensor out, tensor self, int upper);
int atg_cholesky_out(tensor *, tensor out, tensor self, int upper);
int atg_cholesky_solve(tensor *, tensor self, tensor input2, int upper);
int atg_cholesky_solve_out(tensor *, tensor out, tensor self, tensor input2, int upper);
// tensor *atg_chunk(tensor self, int64_t chunks, int64_t dim);
int atg_chunk(tensor *, tensor self, int64_t chunks, int64_t dim);
int atg_clamp(tensor *, tensor self, scalar min, scalar max);
int atg_clamp_(tensor *, tensor self, scalar min, scalar max);
int atg_clamp_max(tensor *, tensor self, scalar max);
int atg_clamp_max_(tensor *, tensor self, scalar max);
int atg_clamp_max_out(tensor *, tensor out, tensor self, scalar max);
int atg_clamp_min(tensor *, tensor self, scalar min);
int atg_clamp_min_(tensor *, tensor self, scalar min);
int atg_clamp_min_out(tensor *, tensor out, tensor self, scalar min);
int atg_clamp_out(tensor *, tensor out, tensor self, scalar min, scalar max);
int atg_clone(tensor *, tensor self);
int atg_coalesce(tensor *, tensor self);
int atg_col2im(tensor *, tensor self, int64_t *output_size_data, int output_size_len, int64_t *kernel_size_data, int kernel_size_len, int64_t *dilation_data, int dilation_len, int64_t *padding_data, int padding_len, int64_t *stride_data, int stride_len);
int atg_col2im_backward(tensor *, tensor grad_output, int64_t *kernel_size_data, int kernel_size_len, int64_t *dilation_data, int dilation_len, int64_t *padding_data, int padding_len, int64_t *stride_data, int stride_len);
int atg_col2im_backward_out(tensor *, tensor grad_input, tensor grad_output, int64_t *kernel_size_data, int kernel_size_len, int64_t *dilation_data, int dilation_len, int64_t *padding_data, int padding_len, int64_t *stride_data, int stride_len);
int atg_col2im_out(tensor *, tensor out, tensor self, int64_t *output_size_data, int output_size_len, int64_t *kernel_size_data, int kernel_size_len, int64_t *dilation_data, int dilation_len, int64_t *padding_data, int padding_len, int64_t *stride_data, int stride_len);
int atg_combinations(tensor *, tensor self, int64_t r, int with_replacement);
int atg_conj(tensor *, tensor self);
int atg_conj_out(tensor *, tensor out, tensor self);
int atg_constant_pad_nd(tensor *, tensor self, int64_t *pad_data, int pad_len);
int atg_contiguous(tensor *, tensor self);
int atg_conv1d(tensor *, tensor input, tensor weight, tensor bias, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len, int64_t *dilation_data, int dilation_len, int64_t groups);
int atg_conv2d(tensor *, tensor input, tensor weight, tensor bias, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len, int64_t *dilation_data, int dilation_len, int64_t groups);
int atg_conv3d(tensor *, tensor input, tensor weight, tensor bias, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len, int64_t *dilation_data, int dilation_len, int64_t groups);
int atg_conv_tbc(tensor *, tensor self, tensor weight, tensor bias, int64_t pad);
int atg_conv_tbc_backward(tensor *, tensor self, tensor input, tensor weight, tensor bias, int64_t pad);
int atg_conv_transpose1d(tensor *, tensor input, tensor weight, tensor bias, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len, int64_t *output_padding_data, int output_padding_len, int64_t groups, int64_t *dilation_data, int dilation_len);
int atg_conv_transpose2d(tensor *, tensor input, tensor weight, tensor bias, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len, int64_t *output_padding_data, int output_padding_len, int64_t groups, int64_t *dilation_data, int dilation_len);
int atg_conv_transpose3d(tensor *, tensor input, tensor weight, tensor bias, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len, int64_t *output_padding_data, int output_padding_len, int64_t groups, int64_t *dilation_data, int dilation_len);
int atg_convolution(tensor *, tensor input, tensor weight, tensor bias, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len, int64_t *dilation_data, int dilation_len, int transposed, int64_t *output_padding_data, int output_padding_len, int64_t groups);
int atg_convolution_overrideable(tensor *, tensor input, tensor weight, tensor bias, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len, int64_t *dilation_data, int dilation_len, int transposed, int64_t *output_padding_data, int output_padding_len, int64_t groups);
int atg_copy_sparse_to_sparse_(tensor *, tensor self, tensor src, int non_blocking);
int atg_cos(tensor *, tensor self);
int atg_cos_(tensor *, tensor self);
int atg_cos_out(tensor *, tensor out, tensor self);
int atg_cosh(tensor *, tensor self);
int atg_cosh_(tensor *, tensor self);
int atg_cosh_out(tensor *, tensor out, tensor self);
int atg_cosine_embedding_loss(tensor *, tensor input1, tensor input2, tensor target, double margin, int64_t reduction);
int atg_cosine_similarity(tensor *, tensor x1, tensor x2, int64_t dim, double eps);
int atg_cross(tensor *, tensor self, tensor other, int64_t dim);
int atg_cross_out(tensor *, tensor out, tensor self, tensor other, int64_t dim);
int atg_ctc_loss(tensor *, tensor log_probs, tensor targets, int64_t *input_lengths_data, int input_lengths_len, int64_t *target_lengths_data, int target_lengths_len, int64_t blank, int64_t reduction, int zero_infinity);
int atg_ctc_loss1(tensor *, tensor log_probs, tensor targets, tensor input_lengths, tensor target_lengths, int64_t blank, int64_t reduction, int zero_infinity);
int atg_cudnn_affine_grid_generator(tensor *, tensor theta, int64_t n, int64_t C, int64_t H, int64_t W);
int atg_cudnn_affine_grid_generator_backward(tensor *, tensor grad, int64_t n, int64_t C, int64_t H, int64_t W);
int atg_cudnn_batch_norm(tensor *, tensor input, tensor weight, tensor bias, tensor running_mean, tensor running_var, int training, double exponential_average_factor, double epsilon);
int atg_cudnn_batch_norm_backward(tensor *, tensor input, tensor grad_output, tensor weight, tensor running_mean, tensor running_var, tensor save_mean, tensor save_var, double epsilon, tensor reserveSpace);
int atg_cudnn_convolution(tensor *, tensor self, tensor weight, tensor bias, int64_t *padding_data, int padding_len, int64_t *stride_data, int stride_len, int64_t *dilation_data, int dilation_len, int64_t groups, int benchmark, int deterministic);
int atg_cudnn_convolution_backward_bias(tensor *, tensor grad_output);
int atg_cudnn_convolution_backward_input(tensor *, int64_t *self_size_data, int self_size_len, tensor grad_output, tensor weight, int64_t *padding_data, int padding_len, int64_t *stride_data, int stride_len, int64_t *dilation_data, int dilation_len, int64_t groups, int benchmark, int deterministic);
int atg_cudnn_convolution_backward_weight(tensor *, int64_t *weight_size_data, int weight_size_len, tensor grad_output, tensor self, int64_t *padding_data, int padding_len, int64_t *stride_data, int stride_len, int64_t *dilation_data, int dilation_len, int64_t groups, int benchmark, int deterministic);
int atg_cudnn_convolution_transpose(tensor *, tensor self, tensor weight, tensor bias, int64_t *padding_data, int padding_len, int64_t *output_padding_data, int output_padding_len, int64_t *stride_data, int stride_len, int64_t *dilation_data, int dilation_len, int64_t groups, int benchmark, int deterministic);
int atg_cudnn_convolution_transpose_backward_bias(tensor *, tensor grad_output);
int atg_cudnn_convolution_transpose_backward_input(tensor *, tensor grad_output, tensor weight, int64_t *padding_data, int padding_len, int64_t *stride_data, int stride_len, int64_t *dilation_data, int dilation_len, int64_t groups, int benchmark, int deterministic);
int atg_cudnn_convolution_transpose_backward_weight(tensor *, int64_t *weight_size_data, int weight_size_len, tensor grad_output, tensor self, int64_t *padding_data, int padding_len, int64_t *stride_data, int stride_len, int64_t *dilation_data, int dilation_len, int64_t groups, int benchmark, int deterministic);
int atg_cudnn_grid_sampler(tensor *, tensor self, tensor grid);
int atg_cudnn_grid_sampler_backward(tensor *, tensor self, tensor grid, tensor grad_output);
int atg_cumprod(tensor *, tensor self, int64_t dim, int dtype);
int atg_cumprod_out(tensor *, tensor out, tensor self, int64_t dim, int dtype);
int atg_cumsum(tensor *, tensor self, int64_t dim, int dtype);
int atg_cumsum_out(tensor *, tensor out, tensor self, int64_t dim, int dtype);
int atg_data(tensor *, tensor self);
int atg_dequantize(tensor *, tensor self);
int atg_det(tensor *, tensor self);
int atg_detach(tensor *, tensor self);
int atg_detach_(tensor *, tensor self);
int atg_diag(tensor *, tensor self, int64_t diagonal);
int atg_diag_embed(tensor *, tensor self, int64_t offset, int64_t dim1, int64_t dim2);
int atg_diag_out(tensor *, tensor out, tensor self, int64_t diagonal);
int atg_diagflat(tensor *, tensor self, int64_t offset);
int atg_diagonal(tensor *, tensor self, int64_t offset, int64_t dim1, int64_t dim2);
int atg_digamma(tensor *, tensor self);
int atg_digamma_(tensor *, tensor self);
int atg_digamma_out(tensor *, tensor out, tensor self);
int atg_dist(tensor *, tensor self, tensor other);
int atg_div(tensor *, tensor self, tensor other);
int atg_div1(tensor *, tensor self, scalar other);
int atg_div_(tensor *, tensor self, tensor other);
int atg_div_1(tensor *, tensor self, scalar other);
int atg_div_out(tensor *, tensor out, tensor self, tensor other);
int atg_dot(tensor *, tensor self, tensor tensor);
int atg_dot_out(tensor *, tensor out, tensor self, tensor tensor);
int atg_dropout(tensor *, tensor input, double p, int train);
int atg_dropout_(tensor *, tensor self, double p, int train);
int atg_eig(tensor *, tensor self, int eigenvectors);
int atg_eig_out(tensor *, tensor e, tensor v, tensor self, int eigenvectors);
int atg_elu(tensor *, tensor self);
int atg_elu_(tensor *, tensor self);
int atg_elu_backward(tensor *, tensor grad_output, scalar alpha, scalar scale, scalar input_scale, tensor output);
int atg_elu_backward_out(tensor *, tensor grad_input, tensor grad_output, scalar alpha, scalar scale, scalar input_scale, tensor output);
int atg_elu_out(tensor *, tensor out, tensor self);
int atg_embedding(tensor *, tensor weight, tensor indices, int64_t padding_idx, int scale_grad_by_freq, int sparse);
int atg_embedding_backward(tensor *, tensor grad, tensor indices, int64_t num_weights, int64_t padding_idx, int scale_grad_by_freq, int sparse);
int atg_embedding_bag(tensor *, tensor weight, tensor indices, tensor offsets, int scale_grad_by_freq, int64_t mode, int sparse, tensor per_sample_weights);
int atg_embedding_dense_backward(tensor *, tensor grad_output, tensor indices, int64_t num_weights, int64_t padding_idx, int scale_grad_by_freq);
int atg_embedding_renorm_(tensor *, tensor self, tensor indices, double max_norm, double norm_type);
int atg_embedding_sparse_backward(tensor *, tensor grad, tensor indices, int64_t num_weights, int64_t padding_idx, int scale_grad_by_freq);
int atg_empty(tensor *, int64_t *size_data, int size_len, int options_kind, int options_device);
int atg_empty_like(tensor *, tensor self);
int atg_empty_like1(tensor *, tensor self, int options_kind, int options_device);
int atg_empty_out(tensor *, tensor out, int64_t *size_data, int size_len);
int atg_empty_strided(tensor *, int64_t *size_data, int size_len, int64_t *stride_data, int stride_len, int options_kind, int options_device);
int atg_eq(tensor *, tensor self, scalar other);
int atg_eq1(tensor *, tensor self, tensor other);
int atg_eq_(tensor *, tensor self, scalar other);
int atg_eq_1(tensor *, tensor self, tensor other);
int atg_eq_out(tensor *, tensor out, tensor self, scalar other);
int atg_eq_out1(tensor *, tensor out, tensor self, tensor other);
int atg_erf(tensor *, tensor self);
int atg_erf_(tensor *, tensor self);
int atg_erf_out(tensor *, tensor out, tensor self);
int atg_erfc(tensor *, tensor self);
int atg_erfc_(tensor *, tensor self);
int atg_erfc_out(tensor *, tensor out, tensor self);
int atg_erfinv(tensor *, tensor self);
int atg_erfinv_(tensor *, tensor self);
int atg_erfinv_out(tensor *, tensor out, tensor self);
int atg_exp(tensor *, tensor self);
int atg_exp_(tensor *, tensor self);
int atg_exp_out(tensor *, tensor out, tensor self);
int atg_expand(tensor *, tensor self, int64_t *size_data, int size_len, int implicit);
int atg_expand_as(tensor *, tensor self, tensor other);
int atg_expm1(tensor *, tensor self);
int atg_expm1_(tensor *, tensor self);
int atg_expm1_out(tensor *, tensor out, tensor self);
int atg_exponential_(tensor *, tensor self, double lambd);
int atg_eye(tensor *, int64_t n, int options_kind, int options_device);
int atg_eye1(tensor *, int64_t n, int64_t m, int options_kind, int options_device);
int atg_eye_out(tensor *, tensor out, int64_t n);
int atg_eye_out1(tensor *, tensor out, int64_t n, int64_t m);
int atg_fake_quantize_per_channel_affine(tensor *, tensor self, tensor scale, tensor zero_point, int64_t axis, int64_t quant_min, int64_t quant_max);
int atg_fake_quantize_per_channel_affine_backward(tensor *, tensor grad, tensor self, tensor scale, tensor zero_point, int64_t axis, int64_t quant_min, int64_t quant_max);
int atg_fake_quantize_per_tensor_affine(tensor *, tensor self, double scale, int64_t zero_point, int64_t quant_min, int64_t quant_max);
int atg_fake_quantize_per_tensor_affine_backward(tensor *, tensor grad, tensor self, double scale, int64_t zero_point, int64_t quant_min, int64_t quant_max);
int atg_fbgemm_linear_fp16_weight(tensor *, tensor input, tensor packed_weight, tensor bias);
int atg_fbgemm_linear_fp16_weight_fp32_activation(tensor *, tensor input, tensor packed_weight, tensor bias);
int atg_fbgemm_linear_int8_weight(tensor *, tensor input, tensor weight, tensor packed, tensor col_offsets, scalar weight_scale, scalar weight_zero_point, tensor bias);
int atg_fbgemm_linear_int8_weight_fp32_activation(tensor *, tensor input, tensor weight, tensor packed, tensor col_offsets, scalar weight_scale, scalar weight_zero_point, tensor bias);
int atg_fbgemm_pack_gemm_matrix_fp16(tensor *, tensor input);
int atg_fbgemm_pack_quantized_matrix(tensor *, tensor input);
int atg_fbgemm_pack_quantized_matrix1(tensor *, tensor input, int64_t K, int64_t n);
int atg_feature_alpha_dropout(tensor *, tensor input, double p, int train);
int atg_feature_alpha_dropout_(tensor *, tensor self, double p, int train);
int atg_feature_dropout(tensor *, tensor input, double p, int train);
int atg_feature_dropout_(tensor *, tensor self, double p, int train);
int atg_fft(tensor *, tensor self, int64_t signal_ndim, int normalized);
int atg_fill_(tensor *, tensor self, scalar value);
int atg_fill_1(tensor *, tensor self, tensor value);
int atg_fill_diagonal_(tensor *, tensor self, scalar fill_value, int wrap);
int atg_flatten(tensor *, tensor self, int64_t start_dim, int64_t end_dim);
int atg_flip(tensor *, tensor self, int64_t *dims_data, int dims_len);
int atg_floor(tensor *, tensor self);
int atg_floor_(tensor *, tensor self);
int atg_floor_out(tensor *, tensor out, tensor self);
int atg_fmod(tensor *, tensor self, scalar other);
int atg_fmod1(tensor *, tensor self, tensor other);
int atg_fmod_(tensor *, tensor self, scalar other);
int atg_fmod_1(tensor *, tensor self, tensor other);
int atg_fmod_out(tensor *, tensor out, tensor self, scalar other);
int atg_fmod_out1(tensor *, tensor out, tensor self, tensor other);
int atg_frac(tensor *, tensor self);
int atg_frac_(tensor *, tensor self);
int atg_frac_out(tensor *, tensor out, tensor self);
int atg_fractional_max_pool2d(tensor *, tensor self, int64_t *kernel_size_data, int kernel_size_len, int64_t *output_size_data, int output_size_len, tensor random_samples);
int atg_fractional_max_pool2d_backward(tensor *, tensor grad_output, tensor self, int64_t *kernel_size_data, int kernel_size_len, int64_t *output_size_data, int output_size_len, tensor indices);
int atg_fractional_max_pool2d_backward_out(tensor *, tensor grad_input, tensor grad_output, tensor self, int64_t *kernel_size_data, int kernel_size_len, int64_t *output_size_data, int output_size_len, tensor indices);
int atg_fractional_max_pool2d_out(tensor *, tensor output, tensor indices, tensor self, int64_t *kernel_size_data, int kernel_size_len, int64_t *output_size_data, int output_size_len, tensor random_samples);
int atg_fractional_max_pool3d(tensor *, tensor self, int64_t *kernel_size_data, int kernel_size_len, int64_t *output_size_data, int output_size_len, tensor random_samples);
int atg_fractional_max_pool3d_backward(tensor *, tensor grad_output, tensor self, int64_t *kernel_size_data, int kernel_size_len, int64_t *output_size_data, int output_size_len, tensor indices);
int atg_fractional_max_pool3d_backward_out(tensor *, tensor grad_input, tensor grad_output, tensor self, int64_t *kernel_size_data, int kernel_size_len, int64_t *output_size_data, int output_size_len, tensor indices);
int atg_fractional_max_pool3d_out(tensor *, tensor output, tensor indices, tensor self, int64_t *kernel_size_data, int kernel_size_len, int64_t *output_size_data, int output_size_len, tensor random_samples);
int atg_frobenius_norm(tensor *, tensor self);
int atg_frobenius_norm1(tensor *, tensor self, int64_t *dim_data, int dim_len, int keepdim);
int atg_frobenius_norm_out(tensor *, tensor out, tensor self, int64_t *dim_data, int dim_len, int keepdim);
int atg_full(tensor *, int64_t *size_data, int size_len, scalar fill_value, int options_kind, int options_device);
int atg_full_like(tensor *, tensor self, scalar fill_value);
int atg_full_like1(tensor *, tensor self, scalar fill_value, int options_kind, int options_device);
int atg_full_out(tensor *, tensor out, int64_t *size_data, int size_len, scalar fill_value);
int atg_gather(tensor *, tensor self, int64_t dim, tensor index, int sparse_grad);
int atg_gather_out(tensor *, tensor out, tensor self, int64_t dim, tensor index, int sparse_grad);
int atg_ge(tensor *, tensor self, scalar other);
int atg_ge1(tensor *, tensor self, tensor other);
int atg_ge_(tensor *, tensor self, scalar other);
int atg_ge_1(tensor *, tensor self, tensor other);
int atg_ge_out(tensor *, tensor out, tensor self, scalar other);
int atg_ge_out1(tensor *, tensor out, tensor self, tensor other);
int atg_gelu(tensor *, tensor self);
int atg_gelu_backward(tensor *, tensor grad, tensor self);
int atg_geometric_(tensor *, tensor self, double p);
int atg_geqrf(tensor *, tensor self);
int atg_geqrf_out(tensor *, tensor a, tensor tau, tensor self);
int atg_ger(tensor *, tensor self, tensor vec2);
int atg_ger_out(tensor *, tensor out, tensor self, tensor vec2);
int atg_glu(tensor *, tensor self, int64_t dim);
int atg_glu_backward(tensor *, tensor grad_output, tensor self, int64_t dim);
int atg_glu_backward_out(tensor *, tensor grad_input, tensor grad_output, tensor self, int64_t dim);
int atg_glu_out(tensor *, tensor out, tensor self, int64_t dim);
int atg_grad(tensor *, tensor self);
int atg_grid_sampler(tensor *, tensor input, tensor grid, int64_t interpolation_mode, int64_t padding_mode, int align_corners);
int atg_grid_sampler_2d(tensor *, tensor input, tensor grid, int64_t interpolation_mode, int64_t padding_mode, int align_corners);
int atg_grid_sampler_2d_backward(tensor *, tensor grad_output, tensor input, tensor grid, int64_t interpolation_mode, int64_t padding_mode, int align_corners);
int atg_grid_sampler_3d(tensor *, tensor input, tensor grid, int64_t interpolation_mode, int64_t padding_mode, int align_corners);
int atg_grid_sampler_3d_backward(tensor *, tensor grad_output, tensor input, tensor grid, int64_t interpolation_mode, int64_t padding_mode, int align_corners);
int atg_group_norm(tensor *, tensor input, int64_t num_groups, tensor weight, tensor bias, double eps, int cudnn_enabled);
int atg_gru(tensor *, tensor input, tensor hx, tensor *params_data, int params_len, int has_biases, int64_t num_layers, double dropout, int train, int bidirectional, int batch_first);
int atg_gru1(tensor *, tensor data, tensor batch_sizes, tensor hx, tensor *params_data, int params_len, int has_biases, int64_t num_layers, double dropout, int train, int bidirectional);
int atg_gru_cell(tensor *, tensor input, tensor hx, tensor w_ih, tensor w_hh, tensor b_ih, tensor b_hh);
int atg_gt(tensor *, tensor self, scalar other);
int atg_gt1(tensor *, tensor self, tensor other);
int atg_gt_(tensor *, tensor self, scalar other);
int atg_gt_1(tensor *, tensor self, tensor other);
int atg_gt_out(tensor *, tensor out, tensor self, scalar other);
int atg_gt_out1(tensor *, tensor out, tensor self, tensor other);
int atg_hamming_window(tensor *, int64_t window_length, int options_kind, int options_device);
int atg_hamming_window1(tensor *, int64_t window_length, int periodic, int options_kind, int options_device);
int atg_hamming_window2(tensor *, int64_t window_length, int periodic, double alpha, int options_kind, int options_device);
int atg_hamming_window3(tensor *, int64_t window_length, int periodic, double alpha, double beta, int options_kind, int options_device);
int atg_hann_window(tensor *, int64_t window_length, int options_kind, int options_device);
int atg_hann_window1(tensor *, int64_t window_length, int periodic, int options_kind, int options_device);
int atg_hardshrink(tensor *, tensor self);
int atg_hardshrink_backward(tensor *, tensor grad_out, tensor self, scalar lambd);
int atg_hardtanh(tensor *, tensor self);
int atg_hardtanh_(tensor *, tensor self);
int atg_hardtanh_backward(tensor *, tensor grad_output, tensor self, scalar min_val, scalar max_val);
int atg_hardtanh_backward_out(tensor *, tensor grad_input, tensor grad_output, tensor self, scalar min_val, scalar max_val);
int atg_hardtanh_out(tensor *, tensor out, tensor self);
int atg_hinge_embedding_loss(tensor *, tensor self, tensor target, double margin, int64_t reduction);
int atg_histc(tensor *, tensor self, int64_t bins);
int atg_histc_out(tensor *, tensor out, tensor self, int64_t bins);
int atg_hspmm(tensor *, tensor mat1, tensor mat2);
int atg_hspmm_out(tensor *, tensor out, tensor mat1, tensor mat2);
int atg_ifft(tensor *, tensor self, int64_t signal_ndim, int normalized);
int atg_im2col(tensor *, tensor self, int64_t *kernel_size_data, int kernel_size_len, int64_t *dilation_data, int dilation_len, int64_t *padding_data, int padding_len, int64_t *stride_data, int stride_len);
int atg_im2col_backward(tensor *, tensor grad_output, int64_t *input_size_data, int input_size_len, int64_t *kernel_size_data, int kernel_size_len, int64_t *dilation_data, int dilation_len, int64_t *padding_data, int padding_len, int64_t *stride_data, int stride_len);
int atg_im2col_backward_out(tensor *, tensor grad_input, tensor grad_output, int64_t *input_size_data, int input_size_len, int64_t *kernel_size_data, int kernel_size_len, int64_t *dilation_data, int dilation_len, int64_t *padding_data, int padding_len, int64_t *stride_data, int stride_len);
int atg_im2col_out(tensor *, tensor out, tensor self, int64_t *kernel_size_data, int kernel_size_len, int64_t *dilation_data, int dilation_len, int64_t *padding_data, int padding_len, int64_t *stride_data, int stride_len);
int atg_imag(tensor *, tensor self);
int atg_imag_out(tensor *, tensor out, tensor self);
int atg_index(tensor *, tensor self, tensor *indices_data, int indices_len);
int atg_index_add(tensor *, tensor self, int64_t dim, tensor index, tensor source);
int atg_index_add_(tensor *, tensor self, int64_t dim, tensor index, tensor source);
int atg_index_copy(tensor *, tensor self, int64_t dim, tensor index, tensor source);
int atg_index_copy_(tensor *, tensor self, int64_t dim, tensor index, tensor source);
int atg_index_fill(tensor *, tensor self, int64_t dim, tensor index, scalar value);
int atg_index_fill1(tensor *, tensor self, int64_t dim, tensor index, tensor value);
int atg_index_fill_(tensor *, tensor self, int64_t dim, tensor index, scalar value);
int atg_index_fill_1(tensor *, tensor self, int64_t dim, tensor index, tensor value);
int atg_index_put(tensor *, tensor self, tensor *indices_data, int indices_len, tensor values, int accumulate);
int atg_index_put_(tensor *, tensor self, tensor *indices_data, int indices_len, tensor values, int accumulate);
int atg_index_select(tensor *, tensor self, int64_t dim, tensor index);
int atg_index_select_out(tensor *, tensor out, tensor self, int64_t dim, tensor index);
int atg_indices(tensor *, tensor self);
int atg_instance_norm(tensor *, tensor input, tensor weight, tensor bias, tensor running_mean, tensor running_var, int use_input_stats, double momentum, double eps, int cudnn_enabled);
int atg_int_repr(tensor *, tensor self);
int atg_inverse(tensor *, tensor self);
int atg_inverse_out(tensor *, tensor out, tensor self);
int atg_irfft(tensor *, tensor self, int64_t signal_ndim, int normalized, int onesided, int64_t *signal_sizes_data, int signal_sizes_len);
int atg_isclose(tensor *, tensor self, tensor other, double rtol, double atol, int equal_nan);
int atg_isfinite(tensor *, tensor self);
int atg_isnan(tensor *, tensor self);
int atg_kl_div(tensor *, tensor self, tensor target, int64_t reduction);
int atg_kl_div_backward(tensor *, tensor grad_output, tensor self, tensor target, int64_t reduction);
int atg_kthvalue(tensor *, tensor self, int64_t k, int64_t dim, int keepdim);
int atg_kthvalue_out(tensor *, tensor values, tensor indices, tensor self, int64_t k, int64_t dim, int keepdim);
int atg_l1_loss(tensor *, tensor self, tensor target, int64_t reduction);
int atg_l1_loss_backward(tensor *, tensor grad_output, tensor self, tensor target, int64_t reduction);
int atg_l1_loss_backward_out(tensor *, tensor grad_input, tensor grad_output, tensor self, tensor target, int64_t reduction);
int atg_l1_loss_out(tensor *, tensor out, tensor self, tensor target, int64_t reduction);
int atg_layer_norm(tensor *, tensor input, int64_t *normalized_shape_data, int normalized_shape_len, tensor weight, tensor bias, double eps, int cudnn_enable);
int atg_le(tensor *, tensor self, scalar other);
int atg_le1(tensor *, tensor self, tensor other);
int atg_le_(tensor *, tensor self, scalar other);
int atg_le_1(tensor *, tensor self, tensor other);
int atg_le_out(tensor *, tensor out, tensor self, scalar other);
int atg_le_out1(tensor *, tensor out, tensor self, tensor other);
int atg_leaky_relu(tensor *, tensor self);
int atg_leaky_relu_(tensor *, tensor self);
int atg_leaky_relu_backward(tensor *, tensor grad_output, tensor self, scalar negative_slope);
int atg_leaky_relu_backward_out(tensor *, tensor grad_input, tensor grad_output, tensor self, scalar negative_slope);
int atg_leaky_relu_out(tensor *, tensor out, tensor self);
int atg_lerp(tensor *, tensor self, tensor end, scalar weight);
int atg_lerp1(tensor *, tensor self, tensor end, tensor weight);
int atg_lerp_(tensor *, tensor self, tensor end, scalar weight);
int atg_lerp_1(tensor *, tensor self, tensor end, tensor weight);
int atg_lerp_out(tensor *, tensor out, tensor self, tensor end, scalar weight);
int atg_lerp_out1(tensor *, tensor out, tensor self, tensor end, tensor weight);
int atg_lgamma(tensor *, tensor self);
int atg_lgamma_(tensor *, tensor self);
int atg_lgamma_out(tensor *, tensor out, tensor self);
int atg_linear(tensor *, tensor input, tensor weight, tensor bias);
int atg_linspace(tensor *, scalar start, scalar end, int64_t steps, int options_kind, int options_device);
int atg_linspace_out(tensor *, tensor out, scalar start, scalar end, int64_t steps);
int atg_log(tensor *, tensor self);
int atg_log10(tensor *, tensor self);
int atg_log10_(tensor *, tensor self);
int atg_log10_out(tensor *, tensor out, tensor self);
int atg_log1p(tensor *, tensor self);
int atg_log1p_(tensor *, tensor self);
int atg_log1p_out(tensor *, tensor out, tensor self);
int atg_log2(tensor *, tensor self);
int atg_log2_(tensor *, tensor self);
int atg_log2_out(tensor *, tensor out, tensor self);
int atg_log_(tensor *, tensor self);
int atg_log_normal_(tensor *, tensor self, double mean, double std);
int atg_log_out(tensor *, tensor out, tensor self);
int atg_log_sigmoid(tensor *, tensor self);
int atg_log_sigmoid_backward(tensor *, tensor grad_output, tensor self, tensor buffer);
int atg_log_sigmoid_backward_out(tensor *, tensor grad_input, tensor grad_output, tensor self, tensor buffer);
int atg_log_sigmoid_out(tensor *, tensor out, tensor self);
int atg_log_softmax(tensor *, tensor self, int64_t dim, int dtype);
int atg_logdet(tensor *, tensor self);
int atg_logical_not(tensor *, tensor self);
int atg_logical_not_(tensor *, tensor self);
int atg_logical_not_out(tensor *, tensor out, tensor self);
int atg_logical_xor(tensor *, tensor self, tensor other);
int atg_logical_xor_(tensor *, tensor self, tensor other);
int atg_logical_xor_out(tensor *, tensor out, tensor self, tensor other);
int atg_logspace(tensor *, scalar start, scalar end, int64_t steps, double base, int options_kind, int options_device);
int atg_logspace_out(tensor *, tensor out, scalar start, scalar end, int64_t steps, double base);
int atg_logsumexp(tensor *, tensor self, int64_t *dim_data, int dim_len, int keepdim);
int atg_logsumexp_out(tensor *, tensor out, tensor self, int64_t *dim_data, int dim_len, int keepdim);
int atg_lstm(tensor *, tensor input, tensor *hx_data, int hx_len, tensor *params_data, int params_len, int has_biases, int64_t num_layers, double dropout, int train, int bidirectional, int batch_first);
int atg_lstm1(tensor *, tensor data, tensor batch_sizes, tensor *hx_data, int hx_len, tensor *params_data, int params_len, int has_biases, int64_t num_layers, double dropout, int train, int bidirectional);
int atg_lstm_cell(tensor *, tensor input, tensor *hx_data, int hx_len, tensor w_ih, tensor w_hh, tensor b_ih, tensor b_hh);
int atg_lstsq(tensor *, tensor self, tensor A);
int atg_lstsq_out(tensor *, tensor X, tensor qr, tensor self, tensor A);
int atg_lt(tensor *, tensor self, scalar other);
int atg_lt1(tensor *, tensor self, tensor other);
int atg_lt_(tensor *, tensor self, scalar other);
int atg_lt_1(tensor *, tensor self, tensor other);
int atg_lt_out(tensor *, tensor out, tensor self, scalar other);
int atg_lt_out1(tensor *, tensor out, tensor self, tensor other);
int atg_lu_solve(tensor *, tensor self, tensor LU_data, tensor LU_pivots);
int atg_lu_solve_out(tensor *, tensor out, tensor self, tensor LU_data, tensor LU_pivots);
int atg_margin_ranking_loss(tensor *, tensor input1, tensor input2, tensor target, double margin, int64_t reduction);
int atg_masked_fill(tensor *, tensor self, tensor mask, scalar value);
int atg_masked_fill1(tensor *, tensor self, tensor mask, tensor value);
int atg_masked_fill_(tensor *, tensor self, tensor mask, scalar value);
int atg_masked_fill_1(tensor *, tensor self, tensor mask, tensor value);
int atg_masked_scatter(tensor *, tensor self, tensor mask, tensor source);
int atg_masked_scatter_(tensor *, tensor self, tensor mask, tensor source);
int atg_masked_select(tensor *, tensor self, tensor mask);
int atg_masked_select_out(tensor *, tensor out, tensor self, tensor mask);
int atg_matmul(tensor *, tensor self, tensor other);
int atg_matmul_out(tensor *, tensor out, tensor self, tensor other);
int atg_matrix_power(tensor *, tensor self, int64_t n);
int atg_matrix_rank(tensor *, tensor self, int symmetric);
int atg_matrix_rank1(tensor *, tensor self, double tol, int symmetric);
int atg_max(tensor *, tensor self);
int atg_max1(tensor *, tensor self, tensor other);
int atg_max2(tensor *, tensor self, int64_t dim, int keepdim);
int atg_max_out(tensor *, tensor out, tensor self, tensor other);
int atg_max_out1(tensor *, tensor max, tensor max_values, tensor self, int64_t dim, int keepdim);
int atg_max_pool1d(tensor *, tensor self, int64_t *kernel_size_data, int kernel_size_len, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len, int64_t *dilation_data, int dilation_len, int ceil_mode);
int atg_max_pool1d_with_indices(tensor *, tensor self, int64_t *kernel_size_data, int kernel_size_len, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len, int64_t *dilation_data, int dilation_len, int ceil_mode);
int atg_max_pool2d(tensor *, tensor self, int64_t *kernel_size_data, int kernel_size_len, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len, int64_t *dilation_data, int dilation_len, int ceil_mode);
int atg_max_pool2d_with_indices(tensor *, tensor self, int64_t *kernel_size_data, int kernel_size_len, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len, int64_t *dilation_data, int dilation_len, int ceil_mode);
int atg_max_pool2d_with_indices_backward(tensor *, tensor grad_output, tensor self, int64_t *kernel_size_data, int kernel_size_len, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len, int64_t *dilation_data, int dilation_len, int ceil_mode, tensor indices);
int atg_max_pool2d_with_indices_backward_out(tensor *, tensor grad_input, tensor grad_output, tensor self, int64_t *kernel_size_data, int kernel_size_len, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len, int64_t *dilation_data, int dilation_len, int ceil_mode, tensor indices);
int atg_max_pool2d_with_indices_out(tensor *, tensor out, tensor indices, tensor self, int64_t *kernel_size_data, int kernel_size_len, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len, int64_t *dilation_data, int dilation_len, int ceil_mode);
int atg_max_pool3d(tensor *, tensor self, int64_t *kernel_size_data, int kernel_size_len, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len, int64_t *dilation_data, int dilation_len, int ceil_mode);
int atg_max_pool3d_with_indices(tensor *, tensor self, int64_t *kernel_size_data, int kernel_size_len, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len, int64_t *dilation_data, int dilation_len, int ceil_mode);
int atg_max_pool3d_with_indices_backward(tensor *, tensor grad_output, tensor self, int64_t *kernel_size_data, int kernel_size_len, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len, int64_t *dilation_data, int dilation_len, int ceil_mode, tensor indices);
int atg_max_pool3d_with_indices_backward_out(tensor *, tensor grad_input, tensor grad_output, tensor self, int64_t *kernel_size_data, int kernel_size_len, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len, int64_t *dilation_data, int dilation_len, int ceil_mode, tensor indices);
int atg_max_pool3d_with_indices_out(tensor *, tensor out, tensor indices, tensor self, int64_t *kernel_size_data, int kernel_size_len, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len, int64_t *dilation_data, int dilation_len, int ceil_mode);
int atg_max_unpool2d(tensor *, tensor self, tensor indices, int64_t *output_size_data, int output_size_len);
int atg_max_unpool2d_backward(tensor *, tensor grad_output, tensor self, tensor indices, int64_t *output_size_data, int output_size_len);
int atg_max_unpool2d_backward_out(tensor *, tensor grad_input, tensor grad_output, tensor self, tensor indices, int64_t *output_size_data, int output_size_len);
int atg_max_unpool2d_out(tensor *, tensor out, tensor self, tensor indices, int64_t *output_size_data, int output_size_len);
int atg_max_unpool3d(tensor *, tensor self, tensor indices, int64_t *output_size_data, int output_size_len, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len);
int atg_max_unpool3d_backward(tensor *, tensor grad_output, tensor self, tensor indices, int64_t *output_size_data, int output_size_len, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len);
int atg_max_unpool3d_backward_out(tensor *, tensor grad_input, tensor grad_output, tensor self, tensor indices, int64_t *output_size_data, int output_size_len, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len);
int atg_max_unpool3d_out(tensor *, tensor out, tensor self, tensor indices, int64_t *output_size_data, int output_size_len, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len);
int atg_max_values(tensor *, tensor self, int64_t *dim_data, int dim_len, int keepdim);
int atg_mean(tensor *, tensor self, int dtype);
int atg_mean1(tensor *, tensor self, int64_t *dim_data, int dim_len, int keepdim, int dtype);
int atg_mean_out(tensor *, tensor out, tensor self, int64_t *dim_data, int dim_len, int keepdim, int dtype);
int atg_median(tensor *, tensor self);
int atg_median1(tensor *, tensor self, int64_t dim, int keepdim);
int atg_median_out(tensor *, tensor values, tensor indices, tensor self, int64_t dim, int keepdim);
// tensor *atg_meshgrid(tensor *tensors_data, int tensors_len);
int atg_meshgrid(tensor *, tensor *tensors_data, int tensors_len);
int atg_min(tensor *, tensor self);
int atg_min1(tensor *, tensor self, tensor other);
int atg_min2(tensor *, tensor self, int64_t dim, int keepdim);
int atg_min_out(tensor *, tensor out, tensor self, tensor other);
int atg_min_out1(tensor *, tensor min, tensor min_indices, tensor self, int64_t dim, int keepdim);
int atg_min_values(tensor *, tensor self, int64_t *dim_data, int dim_len, int keepdim);
int atg_miopen_batch_norm(tensor *, tensor input, tensor weight, tensor bias, tensor running_mean, tensor running_var, int training, double exponential_average_factor, double epsilon);
int atg_miopen_batch_norm_backward(tensor *, tensor input, tensor grad_output, tensor weight, tensor running_mean, tensor running_var, tensor save_mean, tensor save_var, double epsilon);
int atg_miopen_convolution(tensor *, tensor self, tensor weight, tensor bias, int64_t *padding_data, int padding_len, int64_t *stride_data, int stride_len, int64_t *dilation_data, int dilation_len, int64_t groups, int benchmark, int deterministic);
int atg_miopen_convolution_backward_bias(tensor *, tensor grad_output);
int atg_miopen_convolution_backward_input(tensor *, int64_t *self_size_data, int self_size_len, tensor grad_output, tensor weight, int64_t *padding_data, int padding_len, int64_t *stride_data, int stride_len, int64_t *dilation_data, int dilation_len, int64_t groups, int benchmark, int deterministic);
int atg_miopen_convolution_backward_weight(tensor *, int64_t *weight_size_data, int weight_size_len, tensor grad_output, tensor self, int64_t *padding_data, int padding_len, int64_t *stride_data, int stride_len, int64_t *dilation_data, int dilation_len, int64_t groups, int benchmark, int deterministic);
int atg_miopen_convolution_transpose(tensor *, tensor self, tensor weight, tensor bias, int64_t *padding_data, int padding_len, int64_t *output_padding_data, int output_padding_len, int64_t *stride_data, int stride_len, int64_t *dilation_data, int dilation_len, int64_t groups, int benchmark, int deterministic);
int atg_miopen_convolution_transpose_backward_input(tensor *, tensor grad_output, tensor weight, int64_t *padding_data, int padding_len, int64_t *stride_data, int stride_len, int64_t *dilation_data, int dilation_len, int64_t groups, int benchmark, int deterministic);
int atg_miopen_convolution_transpose_backward_weight(tensor *, int64_t *weight_size_data, int weight_size_len, tensor grad_output, tensor self, int64_t *padding_data, int padding_len, int64_t *stride_data, int stride_len, int64_t *dilation_data, int dilation_len, int64_t groups, int benchmark, int deterministic);
int atg_miopen_depthwise_convolution(tensor *, tensor self, tensor weight, tensor bias, int64_t *padding_data, int padding_len, int64_t *stride_data, int stride_len, int64_t *dilation_data, int dilation_len, int64_t groups, int benchmark, int deterministic);
int atg_miopen_depthwise_convolution_backward_input(tensor *, int64_t *self_size_data, int self_size_len, tensor grad_output, tensor weight, int64_t *padding_data, int padding_len, int64_t *stride_data, int stride_len, int64_t *dilation_data, int dilation_len, int64_t groups, int benchmark, int deterministic);
int atg_miopen_depthwise_convolution_backward_weight(tensor *, int64_t *weight_size_data, int weight_size_len, tensor grad_output, tensor self, int64_t *padding_data, int padding_len, int64_t *stride_data, int stride_len, int64_t *dilation_data, int dilation_len, int64_t groups, int benchmark, int deterministic);
int atg_miopen_rnn(tensor *, tensor input, tensor *weight_data, int weight_len, int64_t weight_stride0, tensor hx, tensor cx, int64_t mode, int64_t hidden_size, int64_t num_layers, int batch_first, double dropout, int train, int bidirectional, int64_t *batch_sizes_data, int batch_sizes_len, tensor dropout_state);
int atg_mkldnn_adaptive_avg_pool2d(tensor *, tensor self, int64_t *output_size_data, int output_size_len);
int atg_mkldnn_convolution(tensor *, tensor self, tensor weight, tensor bias, int64_t *padding_data, int padding_len, int64_t *stride_data, int stride_len, int64_t *dilation_data, int dilation_len, int64_t groups);
int atg_mkldnn_convolution_backward_input(tensor *, int64_t *self_size_data, int self_size_len, tensor grad_output, tensor weight, int64_t *padding_data, int padding_len, int64_t *stride_data, int stride_len, int64_t *dilation_data, int dilation_len, int64_t groups, int bias_defined);
int atg_mkldnn_convolution_backward_weights(tensor *, int64_t *weight_size_data, int weight_size_len, tensor grad_output, tensor self, int64_t *padding_data, int padding_len, int64_t *stride_data, int stride_len, int64_t *dilation_data, int dilation_len, int64_t groups, int bias_defined);
int atg_mkldnn_linear(tensor *, tensor input, tensor weight, tensor bias);
int atg_mkldnn_max_pool2d(tensor *, tensor self, int64_t *kernel_size_data, int kernel_size_len, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len, int64_t *dilation_data, int dilation_len, int ceil_mode);
int atg_mkldnn_reorder_conv2d_weight(tensor *, tensor self, int64_t *padding_data, int padding_len, int64_t *stride_data, int stride_len, int64_t *dilation_data, int dilation_len, int64_t groups);
int atg_mm(tensor *, tensor self, tensor mat2);
int atg_mm_out(tensor *, tensor out, tensor self, tensor mat2);
int atg_mode(tensor *, tensor self, int64_t dim, int keepdim);
int atg_mode_out(tensor *, tensor values, tensor indices, tensor self, int64_t dim, int keepdim);
int atg_mse_loss(tensor *, tensor self, tensor target, int64_t reduction);
int atg_mse_loss_backward(tensor *, tensor grad_output, tensor self, tensor target, int64_t reduction);
int atg_mse_loss_backward_out(tensor *, tensor grad_input, tensor grad_output, tensor self, tensor target, int64_t reduction);
int atg_mse_loss_out(tensor *, tensor out, tensor self, tensor target, int64_t reduction);
int atg_mul(tensor *, tensor self, tensor other);
int atg_mul1(tensor *, tensor self, scalar other);
int atg_mul_(tensor *, tensor self, tensor other);
int atg_mul_1(tensor *, tensor self, scalar other);
int atg_mul_out(tensor *, tensor out, tensor self, tensor other);
int atg_multi_margin_loss_backward(tensor *, tensor grad_output, tensor self, tensor target, scalar p, scalar margin, tensor weight, int64_t reduction);
int atg_multi_margin_loss_backward_out(tensor *, tensor grad_input, tensor grad_output, tensor self, tensor target, scalar p, scalar margin, tensor weight, int64_t reduction);
int atg_multilabel_margin_loss(tensor *, tensor self, tensor target, int64_t reduction);
int atg_multilabel_margin_loss_backward(tensor *, tensor grad_output, tensor self, tensor target, int64_t reduction, tensor is_target);
int atg_multilabel_margin_loss_backward_out(tensor *, tensor grad_input, tensor grad_output, tensor self, tensor target, int64_t reduction, tensor is_target);
int atg_multilabel_margin_loss_out(tensor *, tensor out, tensor self, tensor target, int64_t reduction);
int atg_multinomial(tensor *, tensor self, int64_t num_samples, int replacement);
int atg_multinomial_out(tensor *, tensor out, tensor self, int64_t num_samples, int replacement);
int atg_mv(tensor *, tensor self, tensor vec);
int atg_mv_out(tensor *, tensor out, tensor self, tensor vec);
int atg_mvlgamma(tensor *, tensor self, int64_t p);
int atg_mvlgamma_(tensor *, tensor self, int64_t p);
int atg_narrow(tensor *, tensor self, int64_t dim, int64_t start, int64_t length);
int atg_narrow_copy(tensor *, tensor self, int64_t dim, int64_t start, int64_t length);
int atg_native_batch_norm(tensor *, tensor input, tensor weight, tensor bias, tensor running_mean, tensor running_var, int training, double momentum, double eps);
int atg_native_layer_norm(tensor *, tensor input, tensor weight, tensor bias, int64_t M, int64_t n, double eps);
int atg_native_norm(tensor *, tensor self);
int atg_ne(tensor *, tensor self, scalar other);
int atg_ne1(tensor *, tensor self, tensor other);
int atg_ne_(tensor *, tensor self, scalar other);
int atg_ne_1(tensor *, tensor self, tensor other);
int atg_ne_out(tensor *, tensor out, tensor self, scalar other);
int atg_ne_out1(tensor *, tensor out, tensor self, tensor other);
int atg_neg(tensor *, tensor self);
int atg_neg_(tensor *, tensor self);
int atg_neg_out(tensor *, tensor out, tensor self);
int atg_new_empty(tensor *, tensor self, int64_t *size_data, int size_len, int options_kind, int options_device);
int atg_new_full(tensor *, tensor self, int64_t *size_data, int size_len, scalar fill_value, int options_kind, int options_device);
int atg_new_zeros(tensor *, tensor self, int64_t *size_data, int size_len, int options_kind, int options_device);
int atg_nll_loss(tensor *, tensor self, tensor target, tensor weight, int64_t reduction, int64_t ignore_index);
int atg_nll_loss2d(tensor *, tensor self, tensor target, tensor weight, int64_t reduction, int64_t ignore_index);
int atg_nll_loss2d_backward(tensor *, tensor grad_output, tensor self, tensor target, tensor weight, int64_t reduction, int64_t ignore_index, tensor total_weight);
int atg_nll_loss2d_backward_out(tensor *, tensor grad_input, tensor grad_output, tensor self, tensor target, tensor weight, int64_t reduction, int64_t ignore_index, tensor total_weight);
int atg_nll_loss2d_out(tensor *, tensor out, tensor self, tensor target, tensor weight, int64_t reduction, int64_t ignore_index);
int atg_nll_loss_backward(tensor *, tensor grad_output, tensor self, tensor target, tensor weight, int64_t reduction, int64_t ignore_index, tensor total_weight);
int atg_nll_loss_backward_out(tensor *, tensor grad_input, tensor grad_output, tensor self, tensor target, tensor weight, int64_t reduction, int64_t ignore_index, tensor total_weight);
int atg_nll_loss_out(tensor *, tensor out, tensor self, tensor target, tensor weight, int64_t reduction, int64_t ignore_index);
int atg_nonzero(tensor *, tensor self);
// tensor *atg_nonzero_numpy(tensor self);
int atg_nonzero_numpy(tensor *, tensor self);
int atg_nonzero_out(tensor *, tensor out, tensor self);
int atg_norm(tensor *, tensor self);
int atg_norm1(tensor *, tensor self, scalar p, int dtype);
int atg_norm2(tensor *, tensor self, scalar p, int64_t *dim_data, int dim_len, int keepdim);
int atg_norm3(tensor *, tensor self, scalar p, int64_t *dim_data, int dim_len, int keepdim, int dtype);
int atg_norm_except_dim(tensor *, tensor v, int64_t pow, int64_t dim);
int atg_norm_out(tensor *, tensor out, tensor self, scalar p, int64_t *dim_data, int dim_len, int keepdim);
int atg_norm_out1(tensor *, tensor out, tensor self, scalar p, int64_t *dim_data, int dim_len, int keepdim, int dtype);
int atg_normal_(tensor *, tensor self, double mean, double std);
int atg_normal_out(tensor *, tensor out, tensor mean, double std);
int atg_normal_out1(tensor *, tensor out, double mean, tensor std);
int atg_normal_out2(tensor *, tensor out, tensor mean, tensor std);
int atg_normal_out3(tensor *, tensor out, double mean, double std, int64_t *size_data, int size_len);
int atg_nuclear_norm(tensor *, tensor self, int keepdim);
int atg_nuclear_norm1(tensor *, tensor self, int64_t *dim_data, int dim_len, int keepdim);
int atg_nuclear_norm_out(tensor *, tensor out, tensor self, int keepdim);
int atg_nuclear_norm_out1(tensor *, tensor out, tensor self, int64_t *dim_data, int dim_len, int keepdim);
int atg_numpy_t(tensor *, tensor self);
int atg_one_hot(tensor *, tensor self, int64_t num_classes);
int atg_ones(tensor *, int64_t *size_data, int size_len, int options_kind, int options_device);
int atg_ones_like(tensor *, tensor self);
int atg_ones_like1(tensor *, tensor self, int options_kind, int options_device);
int atg_ones_out(tensor *, tensor out, int64_t *size_data, int size_len);
int atg_orgqr(tensor *, tensor self, tensor input2);
int atg_orgqr_out(tensor *, tensor out, tensor self, tensor input2);
int atg_ormqr(tensor *, tensor self, tensor input2, tensor input3, int left, int transpose);
int atg_ormqr_out(tensor *, tensor out, tensor self, tensor input2, tensor input3, int left, int transpose);
int atg_pairwise_distance(tensor *, tensor x1, tensor x2, double p, double eps, int keepdim);
int atg_pdist(tensor *, tensor self, double p);
int atg_permute(tensor *, tensor self, int64_t *dims_data, int dims_len);
int atg_pin_memory(tensor *, tensor self);
int atg_pinverse(tensor *, tensor self, double rcond);
int atg_pixel_shuffle(tensor *, tensor self, int64_t upscale_factor);
int atg_poisson(tensor *, tensor self);
int atg_poisson_nll_loss(tensor *, tensor input, tensor target, int log_input, int full, double eps, int64_t reduction);
int atg_polygamma(tensor *, int64_t n, tensor self);
int atg_polygamma_(tensor *, tensor self, int64_t n);
int atg_polygamma_out(tensor *, tensor out, int64_t n, tensor self);
int atg_pow(tensor *, tensor self, scalar exponent);
int atg_pow1(tensor *, tensor self, tensor exponent);
int atg_pow2(tensor *, scalar self, tensor exponent);
int atg_pow_(tensor *, tensor self, scalar exponent);
int atg_pow_1(tensor *, tensor self, tensor exponent);
int atg_pow_out(tensor *, tensor out, tensor self, scalar exponent);
int atg_pow_out1(tensor *, tensor out, tensor self, tensor exponent);
int atg_pow_out2(tensor *, tensor out, scalar self, tensor exponent);
int atg_prelu(tensor *, tensor self, tensor weight);
int atg_prelu_backward(tensor *, tensor grad_output, tensor self, tensor weight);
int atg_prod(tensor *, tensor self, int dtype);
int atg_prod1(tensor *, tensor self, int64_t dim, int keepdim, int dtype);
int atg_prod_out(tensor *, tensor out, tensor self, int64_t dim, int keepdim, int dtype);
int atg_put_(tensor *, tensor self, tensor index, tensor source, int accumulate);
int atg_q_per_channel_scales(tensor *, tensor self);
int atg_q_per_channel_zero_points(tensor *, tensor self);
int atg_qr(tensor *, tensor self, int some);
int atg_qr_out(tensor *, tensor Q, tensor R, tensor self, int some);
int atg_quantize_per_channel(tensor *, tensor self, tensor scales, tensor zero_points, int64_t axis, int dtype);
int atg_quantize_per_tensor(tensor *, tensor self, double scale, int64_t zero_point, int dtype);
int atg_quantized_gru(tensor *, tensor input, tensor hx, tensor *params_data, int params_len, int has_biases, int64_t num_layers, double dropout, int train, int bidirectional, int batch_first);
int atg_quantized_gru1(tensor *, tensor data, tensor batch_sizes, tensor hx, tensor *params_data, int params_len, int has_biases, int64_t num_layers, double dropout, int train, int bidirectional);
int atg_quantized_gru_cell(tensor *, tensor input, tensor hx, tensor w_ih, tensor w_hh, tensor b_ih, tensor b_hh, tensor packed_ih, tensor packed_hh, tensor col_offsets_ih, tensor col_offsets_hh, scalar scale_ih, scalar scale_hh, scalar zero_point_ih, scalar zero_point_hh);
int atg_quantized_lstm(tensor *, tensor input, tensor *hx_data, int hx_len, tensor *params_data, int params_len, int has_biases, int64_t num_layers, double dropout, int train, int bidirectional, int batch_first, int dtype, int use_dynamic);
int atg_quantized_lstm1(tensor *, tensor data, tensor batch_sizes, tensor *hx_data, int hx_len, tensor *params_data, int params_len, int has_biases, int64_t num_layers, double dropout, int train, int bidirectional, int dtype, int use_dynamic);
int atg_quantized_lstm_cell(tensor *, tensor input, tensor *hx_data, int hx_len, tensor w_ih, tensor w_hh, tensor b_ih, tensor b_hh, tensor packed_ih, tensor packed_hh, tensor col_offsets_ih, tensor col_offsets_hh, scalar scale_ih, scalar scale_hh, scalar zero_point_ih, scalar zero_point_hh);
int atg_quantized_max_pool2d(tensor *, tensor self, int64_t *kernel_size_data, int kernel_size_len, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len, int64_t *dilation_data, int dilation_len, int ceil_mode);
int atg_quantized_rnn_relu_cell(tensor *, tensor input, tensor hx, tensor w_ih, tensor w_hh, tensor b_ih, tensor b_hh, tensor packed_ih, tensor packed_hh, tensor col_offsets_ih, tensor col_offsets_hh, scalar scale_ih, scalar scale_hh, scalar zero_point_ih, scalar zero_point_hh);
int atg_quantized_rnn_tanh_cell(tensor *, tensor input, tensor hx, tensor w_ih, tensor w_hh, tensor b_ih, tensor b_hh, tensor packed_ih, tensor packed_hh, tensor col_offsets_ih, tensor col_offsets_hh, scalar scale_ih, scalar scale_hh, scalar zero_point_ih, scalar zero_point_hh);
int atg_rand(tensor *, int64_t *size_data, int size_len, int options_kind, int options_device);
int atg_rand_like(tensor *, tensor self);
int atg_rand_like1(tensor *, tensor self, int options_kind, int options_device);
int atg_rand_out(tensor *, tensor out, int64_t *size_data, int size_len);
int atg_randint(tensor *, int64_t high, int64_t *size_data, int size_len, int options_kind, int options_device);
int atg_randint1(tensor *, int64_t low, int64_t high, int64_t *size_data, int size_len, int options_kind, int options_device);
int atg_randint_like(tensor *, tensor self, int64_t high);
int atg_randint_like1(tensor *, tensor self, int64_t low, int64_t high);
int atg_randint_like2(tensor *, tensor self, int64_t high, int options_kind, int options_device);
int atg_randint_like3(tensor *, tensor self, int64_t low, int64_t high, int options_kind, int options_device);
int atg_randint_out(tensor *, tensor out, int64_t high, int64_t *size_data, int size_len);
int atg_randint_out1(tensor *, tensor out, int64_t low, int64_t high, int64_t *size_data, int size_len);
int atg_randn(tensor *, int64_t *size_data, int size_len, int options_kind, int options_device);
int atg_randn_like(tensor *, tensor self);
int atg_randn_like1(tensor *, tensor self, int options_kind, int options_device);
int atg_randn_out(tensor *, tensor out, int64_t *size_data, int size_len);
int atg_random_(tensor *, tensor self);
int atg_random_1(tensor *, tensor self, int64_t to);
int atg_random_2(tensor *, tensor self, int64_t from, int64_t to);
int atg_randperm(tensor *, int64_t n, int options_kind, int options_device);
int atg_randperm_out(tensor *, tensor out, int64_t n);
int atg_range(tensor *, scalar start, scalar end, int options_kind, int options_device);
int atg_range1(tensor *, scalar start, scalar end, int options_kind, int options_device);
int atg_range_out(tensor *, tensor out, scalar start, scalar end);
int atg_real(tensor *, tensor self);
int atg_real_out(tensor *, tensor out, tensor self);
int atg_reciprocal(tensor *, tensor self);
int atg_reciprocal_(tensor *, tensor self);
int atg_reciprocal_out(tensor *, tensor out, tensor self);
int atg_reflection_pad1d(tensor *, tensor self, int64_t *padding_data, int padding_len);
int atg_reflection_pad1d_backward(tensor *, tensor grad_output, tensor self, int64_t *padding_data, int padding_len);
int atg_reflection_pad1d_backward_out(tensor *, tensor grad_input, tensor grad_output, tensor self, int64_t *padding_data, int padding_len);
int atg_reflection_pad1d_out(tensor *, tensor out, tensor self, int64_t *padding_data, int padding_len);
int atg_reflection_pad2d(tensor *, tensor self, int64_t *padding_data, int padding_len);
int atg_reflection_pad2d_backward(tensor *, tensor grad_output, tensor self, int64_t *padding_data, int padding_len);
int atg_reflection_pad2d_backward_out(tensor *, tensor grad_input, tensor grad_output, tensor self, int64_t *padding_data, int padding_len);
int atg_reflection_pad2d_out(tensor *, tensor out, tensor self, int64_t *padding_data, int padding_len);
int atg_relu(tensor *, tensor self);
int atg_relu_(tensor *, tensor self);
int atg_remainder(tensor *, tensor self, scalar other);
int atg_remainder1(tensor *, tensor self, tensor other);
int atg_remainder_(tensor *, tensor self, scalar other);
int atg_remainder_1(tensor *, tensor self, tensor other);
int atg_remainder_out(tensor *, tensor out, tensor self, scalar other);
int atg_remainder_out1(tensor *, tensor out, tensor self, tensor other);
int atg_renorm(tensor *, tensor self, scalar p, int64_t dim, scalar maxnorm);
int atg_renorm_(tensor *, tensor self, scalar p, int64_t dim, scalar maxnorm);
int atg_renorm_out(tensor *, tensor out, tensor self, scalar p, int64_t dim, scalar maxnorm);
int atg_repeat(tensor *, tensor self, int64_t *repeats_data, int repeats_len);
int atg_repeat_interleave(tensor *, tensor repeats);
int atg_repeat_interleave1(tensor *, tensor self, tensor repeats, int64_t dim);
int atg_repeat_interleave2(tensor *, tensor self, int64_t repeats, int64_t dim);
int atg_replication_pad1d(tensor *, tensor self, int64_t *padding_data, int padding_len);
int atg_replication_pad1d_backward(tensor *, tensor grad_output, tensor self, int64_t *padding_data, int padding_len);
int atg_replication_pad1d_backward_out(tensor *, tensor grad_input, tensor grad_output, tensor self, int64_t *padding_data, int padding_len);
int atg_replication_pad1d_out(tensor *, tensor out, tensor self, int64_t *padding_data, int padding_len);
int atg_replication_pad2d(tensor *, tensor self, int64_t *padding_data, int padding_len);
int atg_replication_pad2d_backward(tensor *, tensor grad_output, tensor self, int64_t *padding_data, int padding_len);
int atg_replication_pad2d_backward_out(tensor *, tensor grad_input, tensor grad_output, tensor self, int64_t *padding_data, int padding_len);
int atg_replication_pad2d_out(tensor *, tensor out, tensor self, int64_t *padding_data, int padding_len);
int atg_replication_pad3d(tensor *, tensor self, int64_t *padding_data, int padding_len);
int atg_replication_pad3d_backward(tensor *, tensor grad_output, tensor self, int64_t *padding_data, int padding_len);
int atg_replication_pad3d_backward_out(tensor *, tensor grad_input, tensor grad_output, tensor self, int64_t *padding_data, int padding_len);
int atg_replication_pad3d_out(tensor *, tensor out, tensor self, int64_t *padding_data, int padding_len);
int atg_requires_grad_(tensor *, tensor self, int _requires_grad);
int atg_reshape(tensor *, tensor self, int64_t *shape_data, int shape_len);
int atg_reshape_as(tensor *, tensor self, tensor other);
int atg_resize_(tensor *, tensor self, int64_t *size_data, int size_len);
int atg_resize_as_(tensor *, tensor self, tensor the_template);
int atg_rfft(tensor *, tensor self, int64_t signal_ndim, int normalized, int onesided);
int atg_rnn_relu(tensor *, tensor input, tensor hx, tensor *params_data, int params_len, int has_biases, int64_t num_layers, double dropout, int train, int bidirectional, int batch_first);
int atg_rnn_relu1(tensor *, tensor data, tensor batch_sizes, tensor hx, tensor *params_data, int params_len, int has_biases, int64_t num_layers, double dropout, int train, int bidirectional);
int atg_rnn_relu_cell(tensor *, tensor input, tensor hx, tensor w_ih, tensor w_hh, tensor b_ih, tensor b_hh);
int atg_rnn_tanh(tensor *, tensor input, tensor hx, tensor *params_data, int params_len, int has_biases, int64_t num_layers, double dropout, int train, int bidirectional, int batch_first);
int atg_rnn_tanh1(tensor *, tensor data, tensor batch_sizes, tensor hx, tensor *params_data, int params_len, int has_biases, int64_t num_layers, double dropout, int train, int bidirectional);
int atg_rnn_tanh_cell(tensor *, tensor input, tensor hx, tensor w_ih, tensor w_hh, tensor b_ih, tensor b_hh);
int atg_roll(tensor *, tensor self, int64_t *shifts_data, int shifts_len, int64_t *dims_data, int dims_len);
int atg_rot90(tensor *, tensor self, int64_t k, int64_t *dims_data, int dims_len);
int atg_round(tensor *, tensor self);
int atg_round_(tensor *, tensor self);
int atg_round_out(tensor *, tensor out, tensor self);
int atg_rrelu(tensor *, tensor self, int training);
int atg_rrelu_(tensor *, tensor self, int training);
int atg_rrelu_with_noise(tensor *, tensor self, tensor noise, int training);
int atg_rrelu_with_noise_(tensor *, tensor self, tensor noise, int training);
int atg_rrelu_with_noise_backward(tensor *, tensor grad_output, tensor self, tensor noise, scalar lower, scalar upper, int training);
int atg_rrelu_with_noise_backward_out(tensor *, tensor grad_input, tensor grad_output, tensor self, tensor noise, scalar lower, scalar upper, int training);
int atg_rrelu_with_noise_out(tensor *, tensor out, tensor self, tensor noise, int training);
int atg_rsqrt(tensor *, tensor self);
int atg_rsqrt_(tensor *, tensor self);
int atg_rsqrt_out(tensor *, tensor out, tensor self);
int atg_rsub(tensor *, tensor self, tensor other);
int atg_rsub1(tensor *, tensor self, scalar other);
int atg_scalar_tensor(tensor *, scalar s, int options_kind, int options_device);
int atg_scatter(tensor *, tensor self, int64_t dim, tensor index, tensor src);
int atg_scatter1(tensor *, tensor self, int64_t dim, tensor index, scalar value);
int atg_scatter_(tensor *, tensor self, int64_t dim, tensor index, tensor src);
int atg_scatter_1(tensor *, tensor self, int64_t dim, tensor index, scalar value);
int atg_scatter_add(tensor *, tensor self, int64_t dim, tensor index, tensor src);
int atg_scatter_add_(tensor *, tensor self, int64_t dim, tensor index, tensor src);
int atg_select(tensor *, tensor self, int64_t dim, int64_t index);
int atg_selu(tensor *, tensor self);
int atg_selu_(tensor *, tensor self);
int atg_set_(tensor *, tensor self);
int atg_set_1(tensor *, tensor self, tensor source);
int atg_set_requires_grad(tensor *, tensor self, int r);
int atg_sigmoid(tensor *, tensor self);
int atg_sigmoid_(tensor *, tensor self);
int atg_sigmoid_backward(tensor *, tensor grad_output, tensor output);
int atg_sigmoid_backward_out(tensor *, tensor grad_input, tensor grad_output, tensor output);
int atg_sigmoid_out(tensor *, tensor out, tensor self);
int atg_sign(tensor *, tensor self);
int atg_sign_(tensor *, tensor self);
int atg_sign_out(tensor *, tensor out, tensor self);
int atg_sin(tensor *, tensor self);
int atg_sin_(tensor *, tensor self);
int atg_sin_out(tensor *, tensor out, tensor self);
int atg_sinh(tensor *, tensor self);
int atg_sinh_(tensor *, tensor self);
int atg_sinh_out(tensor *, tensor out, tensor self);
int atg_slice(tensor *, tensor self, int64_t dim, int64_t start, int64_t end, int64_t step);
int atg_slogdet(tensor *, tensor self);
int atg_slow_conv3d(tensor *, tensor self, tensor weight, int64_t *kernel_size_data, int kernel_size_len, tensor bias, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len);
int atg_slow_conv3d_out(tensor *, tensor out, tensor self, tensor weight, int64_t *kernel_size_data, int kernel_size_len, tensor bias, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len);
int atg_slow_conv_dilated2d(tensor *, tensor self, tensor weight, int64_t *kernel_size_data, int kernel_size_len, tensor bias, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len, int64_t *dilation_data, int dilation_len);
int atg_slow_conv_dilated3d(tensor *, tensor self, tensor weight, int64_t *kernel_size_data, int kernel_size_len, tensor bias, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len, int64_t *dilation_data, int dilation_len);
int atg_slow_conv_transpose2d(tensor *, tensor self, tensor weight, int64_t *kernel_size_data, int kernel_size_len, tensor bias, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len, int64_t *output_padding_data, int output_padding_len, int64_t *dilation_data, int dilation_len);
int atg_slow_conv_transpose2d_out(tensor *, tensor out, tensor self, tensor weight, int64_t *kernel_size_data, int kernel_size_len, tensor bias, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len, int64_t *output_padding_data, int output_padding_len, int64_t *dilation_data, int dilation_len);
int atg_slow_conv_transpose3d(tensor *, tensor self, tensor weight, int64_t *kernel_size_data, int kernel_size_len, tensor bias, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len, int64_t *output_padding_data, int output_padding_len, int64_t *dilation_data, int dilation_len);
int atg_slow_conv_transpose3d_out(tensor *, tensor out, tensor self, tensor weight, int64_t *kernel_size_data, int kernel_size_len, tensor bias, int64_t *stride_data, int stride_len, int64_t *padding_data, int padding_len, int64_t *output_padding_data, int output_padding_len, int64_t *dilation_data, int dilation_len);
int atg_smm(tensor *, tensor self, tensor mat2);
int atg_smooth_l1_loss(tensor *, tensor self, tensor target, int64_t reduction);
int atg_smooth_l1_loss_backward(tensor *, tensor grad_output, tensor self, tensor target, int64_t reduction);
int atg_smooth_l1_loss_backward_out(tensor *, tensor grad_input, tensor grad_output, tensor self, tensor target, int64_t reduction);
int atg_smooth_l1_loss_out(tensor *, tensor out, tensor self, tensor target, int64_t reduction);
int atg_soft_margin_loss(tensor *, tensor self, tensor target, int64_t reduction);
int atg_soft_margin_loss_backward(tensor *, tensor grad_output, tensor self, tensor target, int64_t reduction);
int atg_soft_margin_loss_backward_out(tensor *, tensor grad_input, tensor grad_output, tensor self, tensor target, int64_t reduction);
int atg_soft_margin_loss_out(tensor *, tensor out, tensor self, tensor target, int64_t reduction);
int atg_softmax(tensor *, tensor self, int64_t dim, int dtype);
int atg_softplus(tensor *, tensor self);
int atg_softplus_backward(tensor *, tensor grad_output, tensor self, scalar beta, scalar threshold, tensor output);
int atg_softplus_backward_out(tensor *, tensor grad_input, tensor grad_output, tensor self, scalar beta, scalar threshold, tensor output);
int atg_softplus_out(tensor *, tensor out, tensor self);
int atg_softshrink(tensor *, tensor self);
int atg_softshrink_backward(tensor *, tensor grad_output, tensor self, scalar lambd);
int atg_softshrink_backward_out(tensor *, tensor grad_input, tensor grad_output, tensor self, scalar lambd);
int atg_softshrink_out(tensor *, tensor out, tensor self);
int atg_solve(tensor *, tensor self, tensor A);
int atg_solve_out(tensor *, tensor solution, tensor lu, tensor self, tensor A);
int atg_sort(tensor *, tensor self, int64_t dim, int descending);
int atg_sort_out(tensor *, tensor values, tensor indices, tensor self, int64_t dim, int descending);
int atg_sparse_coo_tensor(tensor *, int64_t *size_data, int size_len, int options_kind, int options_device);
int atg_sparse_coo_tensor1(tensor *, tensor indices, tensor values, int options_kind, int options_device);
int atg_sparse_coo_tensor2(tensor *, tensor indices, tensor values, int64_t *size_data, int size_len, int options_kind, int options_device);
int atg_sparse_mask(tensor *, tensor self, tensor mask);
int atg_sparse_resize_(tensor *, tensor self, int64_t *size_data, int size_len, int64_t sparse_dim, int64_t dense_dim);
int atg_sparse_resize_and_clear_(tensor *, tensor self, int64_t *size_data, int size_len, int64_t sparse_dim, int64_t dense_dim);
// tensor *atg_split(tensor self, int64_t split_size, int64_t dim);
int atg_split(tensor *, tensor self, int64_t split_size, int64_t dim);
// tensor *atg_split_with_sizes(tensor self, int64_t *split_sizes_data, int split_sizes_len, int64_t dim);
int atg_split_with_sizes(tensor *, tensor self, int64_t *split_sizes_data, int split_sizes_len, int64_t dim);
int atg_sqrt(tensor *, tensor self);
int atg_sqrt_(tensor *, tensor self);
int atg_sqrt_out(tensor *, tensor out, tensor self);
int atg_squeeze(tensor *, tensor self);
int atg_squeeze1(tensor *, tensor self, int64_t dim);
int atg_squeeze_(tensor *, tensor self);
int atg_squeeze_1(tensor *, tensor self, int64_t dim);
int atg_sspaddmm(tensor *, tensor self, tensor mat1, tensor mat2);
int atg_sspaddmm_out(tensor *, tensor out, tensor self, tensor mat1, tensor mat2);
int atg_stack(tensor *, tensor *tensors_data, int tensors_len, int64_t dim);
int atg_stack_out(tensor *, tensor out, tensor *tensors_data, int tensors_len, int64_t dim);
int atg_std(tensor *, tensor self, int unbiased);
int atg_std1(tensor *, tensor self, int64_t *dim_data, int dim_len, int unbiased, int keepdim);
int atg_std_mean(tensor *, tensor self, int unbiased);
int atg_std_mean1(tensor *, tensor self, int64_t *dim_data, int dim_len, int unbiased, int keepdim);
int atg_std_out(tensor *, tensor out, tensor self, int64_t *dim_data, int dim_len, int unbiased, int keepdim);
int atg_stft(tensor *, tensor self, int64_t n_fft, int64_t hop_length, int64_t win_length, tensor window, int normalized, int onesided);
int atg_sub(tensor *, tensor self, tensor other);
int atg_sub1(tensor *, tensor self, scalar other);
int atg_sub_(tensor *, tensor self, tensor other);
int atg_sub_1(tensor *, tensor self, scalar other);
int atg_sub_out(tensor *, tensor out, tensor self, tensor other);
int atg_sum(tensor *, tensor self, int dtype);
int atg_sum1(tensor *, tensor self, int64_t *dim_data, int dim_len, int keepdim, int dtype);
int atg_sum_out(tensor *, tensor out, tensor self, int64_t *dim_data, int dim_len, int keepdim, int dtype);
int atg_sum_to_size(tensor *, tensor self, int64_t *size_data, int size_len);
int atg_svd(tensor *, tensor self, int some, int compute_uv);
int atg_svd_out(tensor *, tensor U, tensor S, tensor V, tensor self, int some, int compute_uv);
int atg_symeig(tensor *, tensor self, int eigenvectors, int upper);
int atg_symeig_out(tensor *, tensor e, tensor V, tensor self, int eigenvectors, int upper);
int atg_t(tensor *, tensor self);
int atg_t_(tensor *, tensor self);
int atg_take(tensor *, tensor self, tensor index);
int atg_take_out(tensor *, tensor out, tensor self, tensor index);
int atg_tan(tensor *, tensor self);
int atg_tan_(tensor *, tensor self);
int atg_tan_out(tensor *, tensor out, tensor self);
int atg_tanh(tensor *, tensor self);
int atg_tanh_(tensor *, tensor self);
int atg_tanh_backward(tensor *, tensor grad_output, tensor output);
int atg_tanh_backward_out(tensor *, tensor grad_input, tensor grad_output, tensor output);
int atg_tanh_out(tensor *, tensor out, tensor self);
int atg_tensordot(tensor *, tensor self, tensor other, int64_t *dims_self_data, int dims_self_len, int64_t *dims_other_data, int dims_other_len);
int atg_threshold(tensor *, tensor self, scalar threshold, scalar value);
int atg_threshold_(tensor *, tensor self, scalar threshold, scalar value);
int atg_threshold_backward(tensor *, tensor grad_output, tensor self, scalar threshold);
int atg_threshold_out(tensor *, tensor out, tensor self, scalar threshold, scalar value);
int atg_to(tensor *, tensor self, int device);
int atg_to1(tensor *, tensor self, int options_kind, int options_device, int non_blocking, int copy);
int atg_to2(tensor *, tensor self, int dtype, int non_blocking, int copy);
int atg_to3(tensor *, tensor self, tensor other, int non_blocking, int copy);
int atg_to4(tensor *, tensor self, int device, int dtype, int non_blocking, int copy);
int atg_to_dense(tensor *, tensor self);
int atg_to_dense_backward(tensor *, tensor grad, tensor input);
int atg_to_mkldnn(tensor *, tensor self);
int atg_to_mkldnn_backward(tensor *, tensor grad, tensor input);
int atg_to_sparse(tensor *, tensor self);
int atg_to_sparse1(tensor *, tensor self, int64_t sparse_dim);
int atg_topk(tensor *, tensor self, int64_t k, int64_t dim, int largest, int sorted);
int atg_topk_out(tensor *, tensor values, tensor indices, tensor self, int64_t k, int64_t dim, int largest, int sorted);
int atg_totype(tensor *, tensor self, int scalar_type);
int atg_trace(tensor *, tensor self);
int atg_transpose(tensor *, tensor self, int64_t dim0, int64_t dim1);
int atg_transpose_(tensor *, tensor self, int64_t dim0, int64_t dim1);
int atg_trapz(tensor *, tensor y, tensor x, int64_t dim);
int atg_trapz1(tensor *, tensor y, double dx, int64_t dim);
int atg_triangular_solve(tensor *, tensor self, tensor A, int upper, int transpose, int unitriangular);
int atg_triangular_solve_out(tensor *, tensor X, tensor M, tensor self, tensor A, int upper, int transpose, int unitriangular);
int atg_tril(tensor *, tensor self, int64_t diagonal);
int atg_tril_(tensor *, tensor self, int64_t diagonal);
int atg_tril_indices(tensor *, int64_t row, int64_t col, int64_t offset, int options_kind, int options_device);
int atg_tril_out(tensor *, tensor out, tensor self, int64_t diagonal);
int atg_triplet_margin_loss(tensor *, tensor anchor, tensor positive, tensor negative, double margin, double p, double eps, int swap, int64_t reduction);
int atg_triu(tensor *, tensor self, int64_t diagonal);
int atg_triu_(tensor *, tensor self, int64_t diagonal);
int atg_triu_indices(tensor *, int64_t row, int64_t col, int64_t offset, int options_kind, int options_device);
int atg_triu_out(tensor *, tensor out, tensor self, int64_t diagonal);
int atg_trunc(tensor *, tensor self);
int atg_trunc_(tensor *, tensor self);
int atg_trunc_out(tensor *, tensor out, tensor self);
int atg_type_as(tensor *, tensor self, tensor other);
// tensor *atg_unbind(tensor self, int64_t dim);
int atg_unbind(tensor *, tensor self, int64_t dim);
int atg_unfold(tensor *, tensor self, int64_t dimension, int64_t size, int64_t step);
int atg_uniform_(tensor *, tensor self, double from, double to);
int atg_unique_consecutive(tensor *, tensor self, int return_inverse, int return_counts, int64_t dim);
int atg_unique_dim(tensor *, tensor self, int64_t dim, int sorted, int return_inverse, int return_counts);
int atg_unique_dim_consecutive(tensor *, tensor self, int64_t dim, int return_inverse, int return_counts);
int atg_unsqueeze(tensor *, tensor self, int64_t dim);
int atg_unsqueeze_(tensor *, tensor self, int64_t dim);
int atg_upsample_bicubic2d(tensor *, tensor self, int64_t *output_size_data, int output_size_len, int align_corners);
int atg_upsample_bicubic2d_backward(tensor *, tensor grad_output, int64_t *output_size_data, int output_size_len, int64_t *input_size_data, int input_size_len, int align_corners);
int atg_upsample_bicubic2d_backward_out(tensor *, tensor grad_input, tensor grad_output, int64_t *output_size_data, int output_size_len, int64_t *input_size_data, int input_size_len, int align_corners);
int atg_upsample_bicubic2d_out(tensor *, tensor out, tensor self, int64_t *output_size_data, int output_size_len, int align_corners);
int atg_upsample_bilinear2d(tensor *, tensor self, int64_t *output_size_data, int output_size_len, int align_corners);
int atg_upsample_bilinear2d_backward(tensor *, tensor grad_output, int64_t *output_size_data, int output_size_len, int64_t *input_size_data, int input_size_len, int align_corners);
int atg_upsample_bilinear2d_backward_out(tensor *, tensor grad_input, tensor grad_output, int64_t *output_size_data, int output_size_len, int64_t *input_size_data, int input_size_len, int align_corners);
int atg_upsample_bilinear2d_out(tensor *, tensor out, tensor self, int64_t *output_size_data, int output_size_len, int align_corners);
int atg_upsample_linear1d(tensor *, tensor self, int64_t *output_size_data, int output_size_len, int align_corners);
int atg_upsample_linear1d_backward(tensor *, tensor grad_output, int64_t *output_size_data, int output_size_len, int64_t *input_size_data, int input_size_len, int align_corners);
int atg_upsample_linear1d_backward_out(tensor *, tensor grad_input, tensor grad_output, int64_t *output_size_data, int output_size_len, int64_t *input_size_data, int input_size_len, int align_corners);
int atg_upsample_linear1d_out(tensor *, tensor out, tensor self, int64_t *output_size_data, int output_size_len, int align_corners);
int atg_upsample_nearest1d(tensor *, tensor self, int64_t *output_size_data, int output_size_len);
int atg_upsample_nearest1d_backward(tensor *, tensor grad_output, int64_t *output_size_data, int output_size_len, int64_t *input_size_data, int input_size_len);
int atg_upsample_nearest1d_backward_out(tensor *, tensor grad_input, tensor grad_output, int64_t *output_size_data, int output_size_len, int64_t *input_size_data, int input_size_len);
int atg_upsample_nearest1d_out(tensor *, tensor out, tensor self, int64_t *output_size_data, int output_size_len);
int atg_upsample_nearest2d(tensor *, tensor self, int64_t *output_size_data, int output_size_len);
int atg_upsample_nearest2d_backward(tensor *, tensor grad_output, int64_t *output_size_data, int output_size_len, int64_t *input_size_data, int input_size_len);
int atg_upsample_nearest2d_backward_out(tensor *, tensor grad_input, tensor grad_output, int64_t *output_size_data, int output_size_len, int64_t *input_size_data, int input_size_len);
int atg_upsample_nearest2d_out(tensor *, tensor out, tensor self, int64_t *output_size_data, int output_size_len);
int atg_upsample_nearest3d(tensor *, tensor self, int64_t *output_size_data, int output_size_len);
int atg_upsample_nearest3d_backward(tensor *, tensor grad_output, int64_t *output_size_data, int output_size_len, int64_t *input_size_data, int input_size_len);
int atg_upsample_nearest3d_backward_out(tensor *, tensor grad_input, tensor grad_output, int64_t *output_size_data, int output_size_len, int64_t *input_size_data, int input_size_len);
int atg_upsample_nearest3d_out(tensor *, tensor out, tensor self, int64_t *output_size_data, int output_size_len);
int atg_upsample_trilinear3d(tensor *, tensor self, int64_t *output_size_data, int output_size_len, int align_corners);
int atg_upsample_trilinear3d_backward(tensor *, tensor grad_output, int64_t *output_size_data, int output_size_len, int64_t *input_size_data, int input_size_len, int align_corners);
int atg_upsample_trilinear3d_backward_out(tensor *, tensor grad_input, tensor grad_output, int64_t *output_size_data, int output_size_len, int64_t *input_size_data, int input_size_len, int align_corners);
int atg_upsample_trilinear3d_out(tensor *, tensor out, tensor self, int64_t *output_size_data, int output_size_len, int align_corners);
int atg_values(tensor *, tensor self);
int atg_var(tensor *, tensor self, int unbiased);
int atg_var1(tensor *, tensor self, int64_t *dim_data, int dim_len, int unbiased, int keepdim);
int atg_var_mean(tensor *, tensor self, int unbiased);
int atg_var_mean1(tensor *, tensor self, int64_t *dim_data, int dim_len, int unbiased, int keepdim);
int atg_var_out(tensor *, tensor out, tensor self, int64_t *dim_data, int dim_len, int unbiased, int keepdim);
int atg_view(tensor *, tensor self, int64_t *size_data, int size_len);
int atg_view_as(tensor *, tensor self, tensor other);
// tensor *atg_where(tensor condition);
int atg_where(tensor *, tensor condition);
int atg_where1(tensor *, tensor condition, tensor self, tensor other);
int atg_zero_(tensor *, tensor self);
int atg_zeros(tensor *, int64_t *size_data, int size_len, int options_kind, int options_device);
int atg_zeros_like(tensor *, tensor self);
int atg_zeros_like1(tensor *, tensor self, int options_kind, int options_device);
int atg_zeros_out(tensor *, tensor out, int64_t *size_data, int size_len);
